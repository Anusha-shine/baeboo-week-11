<%-include("../../views/partials/user/header.ejs")%>

<div class="container mt-5">
    <div class="card shadow rounded-4 p-4">
        <h3 class="mb-4 text-center" style="color: #046963;">Create User Address</h3>
        <form id="addressForm" method="POST" action="/addAddress?redirect=<%= redirect %>">
            <div class="row mb-3">
                <div class="form-group col-md-4 mb-3">
                    <label for="addressType" class="fw-bold">Address Type</label>
                    <input type="text" class="form-control" id="addressType" name="addressType">
                </div>
                <div class="form-group col-md-4 mb-3">
                    <label for="name" class="fw-bold">Name</label>
                    <input type="text" class="form-control" id="name" name="name">
                </div>
                <div class="form-group col-md-4 mb-3">
                    <label for="city" class="fw-bold">City</label>
                    <input type="text" class="form-control" id="city" name="city">
                </div>
            </div>

            <div class="row mb-3">
                <div class="form-group col-md-4 mb-3">
                    <label for="landMark" class="fw-bold">Landmark</label>
                    <input type="text" class="form-control" id="landMark" name="landMark">
                </div>
                <div class="form-group col-md-4 mb-3">
                    <label for="state" class="fw-bold">State</label>
                    <input type="text" class="form-control" id="state" name="state">
                </div>
                <div class="form-group col-md-4 mb-3">
                    <label for="pincode" class="fw-bold">Pincode</label>
                    <input type="number" class="form-control" id="pincode" name="pincode">
                </div>
            </div>

            <div class="row mb-3">
                <div class="form-group col-md-4 mb-3">
                    <label for="phone" class="fw-bold">Phone</label>
                    <input type="number" class="form-control" id="phone" name="phone">
                </div>
                <div class="form-group col-md-4 mb-3">
                    <label for="altPhone" class="fw-bold">Alternate Phone</label>
                    <input type="number" class="form-control" id="altPhone" name="altPhone">
                </div>
            </div>

            <div class="d-flex justify-content-center mt-4">
                <button type="submit" id="submitButton" class="btn btn-success px-5 py-2 rounded-pill">
                    Submit
                </button>
            </div>
        </form>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  document.getElementById('addressForm').addEventListener('submit', async function (event) {
    event.preventDefault(); // Stop form immediately
    const isValid = await validateForm();
    if (isValid) {
      this.submit(); // Submit only if valid
    }
  });

  async function validateForm() {
    let isValid = true;
    const requiredFields = ["addressType", "name", "city", "landMark", "state", "pincode", "phone", "altPhone"];

    // Clear previous errors
    requiredFields.forEach(field => {
      const errEl = document.getElementById(field + "-error");
      if (errEl) errEl.remove();
    });

    requiredFields.forEach(field => {
      const input = document.getElementById(field);
      if (input.value.trim() === "") {
        const errorDiv = document.createElement('div');
        errorDiv.id = field + "-error";
        errorDiv.className = "text-danger";
        errorDiv.textContent = "This field is required.";
        input.parentNode.appendChild(errorDiv);
        isValid = false;
      }
    });

    if (!isValid) {
      await Swal.fire("Missing Fields", "Please fill in all required fields.", "error");
      return false;
    }

    // Pattern validations
    const namePattern = /^[A-Za-z\s]+$/;
    const pincodePattern = /^\d{6}$/;
    const phonePattern = /^\d{10}$/;

    const name = document.getElementById('name').value.trim();
    const city = document.getElementById('city').value.trim();
    const landMark = document.getElementById('landMark').value.trim();
    const state = document.getElementById('state').value.trim();
    const pincode = document.getElementById('pincode').value.trim();
    const phone = document.getElementById('phone').value.trim();
    const altPhone = document.getElementById('altPhone').value.trim();

    if (!namePattern.test(name)) {
      await Swal.fire("Invalid Name", "Name should contain alphabets only.", "error");
      return false;
    }
    if (!namePattern.test(city)) {
      await Swal.fire("Invalid City", "City should contain alphabets only.", "error");
      return false;
    }
    if (!namePattern.test(landMark)) {
      await Swal.fire("Invalid Landmark", "Landmark should contain alphabets only.", "error");
      return false;
    }
    if (!namePattern.test(state)) {
      await Swal.fire("Invalid State", "State should contain alphabets only.", "error");
      return false;
    }
    if (!pincodePattern.test(pincode)) {
      await Swal.fire("Invalid Pincode", "Pincode should be a 6-digit number.", "error");
      return false;
    }
    if (!phonePattern.test(phone)) {
      await Swal.fire("Invalid Phone", "Phone number should be a 10-digit number.", "error");
      return false;
    }
    if (!phonePattern.test(altPhone)) {
      await Swal.fire("Invalid Alt Phone", "Alternate phone should be a 10-digit number.", "error");
      return false;
    }
    if (phone === altPhone) {
      await Swal.fire("Phone Conflict", "Phone and alternate phone must be different.", "error");
      return false;
    }

    return true;
  }
</script>



<%-include("../../views/partials/user/footer.ejs")%>